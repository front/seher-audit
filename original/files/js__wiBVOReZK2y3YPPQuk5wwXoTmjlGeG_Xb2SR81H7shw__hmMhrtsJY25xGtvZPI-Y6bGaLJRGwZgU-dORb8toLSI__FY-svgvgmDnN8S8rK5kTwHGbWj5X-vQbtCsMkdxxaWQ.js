// Generated by CoffeeScript 1.6.3
/*
layoutManager
*/


(function() {
  var __hasProp = {}.hasOwnProperty;

  define('adaptive/layoutManager', ['jQuery', 'core/utils'], function(exports, $, utils) {
    var console, self;
    console = newConsole(exports.__id);
    self = (console.getLevel('debug') ? exports : this);
    self.layouts = {};
    self.sortedLayouts = [];
    self.currentLayout = null;
    self.oldLayout = null;
    self.forcedLayout = null;
    self.getValidatedDomLayoutName = null;
    self.validLayoutNameRegExp = null;
    self.readyListeners = [];
    self.changeListeners = {};
    exports.configure = function(configSettings) {
      var i, layout, name, settings, _i, _len, _ref, _ref1;
      console.debug("configSettings", configSettings);
      _ref = configSettings.layoutDefinitions;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        settings = _ref[name];
        exports.addLayout(name, settings.min_width, settings.max_width, settings.weight, settings.media_query);
      }
      if (console.allowLevel('debug')) {
        console.info('Layout order:');
        _ref1 = self.sortedLayouts;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          layout = _ref1[i];
          console.debug("" + (i + 1) + ": " + layout.__name + ", {min:" + layout.min_width + ", max:" + layout.max_width + "}");
        }
      }
      self.validLayoutNameRegExp = new RegExp('(' + exports.getLayoutNames().join('|') + ')', 'g');
      self.getValidatedDomLayoutName = self.getLayoutNameGetter();
      self.setCurrentLayout(self.getValidatedDomLayoutName());
      console.log("-Current layout: '" + (exports.getLayoutName()) + "'");
      return exports;
    };
    exports.initialize = function() {
      console.info('Initialize!');
      self.setBodyLayoutClassName();
      self.notifyReadyListeners();
      self.notifyChangeListeners();
      return $(window).resize(function() {
        return self.activateLayout(self.getValidatedDomLayoutName());
      });
    };
    exports.setForcedLayout = function(layoutName) {
      var e, forcedLayout, matches, stylesheetToggler;
      if (layoutName == null) {
        layoutName = '';
      }
      forcedLayout = null;
      if (layoutName) {
        matches = layoutName.match(self.validLayoutNameRegExp);
        if (matches != null) {
          layoutName = matches[0];
          console.warn("Setting forced layoutName '" + layoutName + "'");
          forcedLayout = self.layouts[layoutName];
        } else {
          console.warn("setForcedLayoutName: invalid layoutName '" + layoutName + "'");
          console.trace();
        }
      }
      self.forcedLayout = forcedLayout;
      self.activateLayout(self.getValidatedDomLayoutName());
      try {
        stylesheetToggler = require('core').locate('forcedLayoutStylesheetToggler');
        if (!stylesheetToggler) {
          return console.warn("setForcedLayout: Could not locate a 'stylesheetToggler'-function!");
        } else {
          return stylesheetToggler();
        }
      } catch (_error) {
        e = _error;
        return console.error(e);
      }
    };
    exports.hasForcedLayout = function(name) {
      var _ref;
      if (name) {
        return ((_ref = self.forcedLayout) != null ? _ref.__name : void 0) === name;
      } else if (self.forcedLayout) {
        return self.forcedLayout.__name;
      } else {
        return false;
      }
    };
    self.activateLayout = function(layoutName) {
      var changedCurrentLayout;
      changedCurrentLayout = self.setCurrentLayout(layoutName);
      if (changedCurrentLayout) {
        self.setBodyLayoutClassName();
        self.notifyChangeListeners();
      }
      return changedCurrentLayout;
    };
    self.setCurrentLayout = function(layoutName) {
      if (self.forcedLayout) {
        layoutName = self.forcedLayout.__name;
      }
      if (self.layouts[layoutName] && (!self.currentLayout || layoutName !== self.currentLayout.__name)) {
        if (!self.currentLayout) {
          console.info("Setting layout " + layoutName + "!");
        } else {
          console.info("Switching layout from '" + self.currentLayout.__name + "' to '" + layoutName + "'!");
          self.oldLayout = self.currentLayout;
        }
        self.currentLayout = self.layouts[layoutName];
        return true;
      }
      return false;
    };
    exports.registerReadyListener = function(callback_fn, options) {
      var callback_context, info_str;
      if (options == null) {
        options = {};
      }
      callback_context = options.callback_context || callback_fn;
      info_str = options.info_str || '';
      if (typeof callback_fn !== 'function') {
        console.warn("registerReadylistener: Callback is not a function! ('" + info_str + "')", callback_fn);
        console.trace();
      } else {
        if (info_str) {
          console.log("registerReadylistener: '" + info_str + "'");
        } else {
          console.log("registerReadylistener: Callback added: ", callback_fn, options);
        }
        self.readyListeners.push({
          fn: callback_fn,
          fn_context: callback_context,
          info_str: info_str
        });
      }
      return callback_fn;
    };
    self.notifyReadyListeners = function() {
      var activeLayoutName, listener, _i, _len, _ref, _results;
      activeLayoutName = exports.getLayoutName();
      _ref = self.readyListeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        if (listener.info_str) {
          console.log("notifyReadyListener: '" + listener.info_str + "'");
        }
        _results.push(listener.fn.apply(listener.fn_context, [activeLayoutName, exports.getLayoutNames()]));
      }
      return _results;
    };
    exports.registerChangeListener = function(callback_fn, options) {
      var callback_context, info_str, persist, weight;
      if (options == null) {
        options = {};
      }
      persist = (options.persist !== undefined ? options.persist : true);
      callback_context = options.callback_context || callback_fn;
      weight = parseInt(options.weight) || 100;
      info_str = options.info_str || '';
      if (!typeof callback_fn === 'function') {
        console.error("registerChangeListener: Callback is not a function! ('" + info_str + "')", callback_fn);
        return;
      }
      if (info_str) {
        console.log("registerChangeListener: '" + info_str + "'");
      } else {
        console.log("registerChangeListener: ", callback_fn, options);
      }
      if (!self.changeListeners[weight]) {
        self.changeListeners[weight] = [];
      }
      self.changeListeners[weight].push({
        fn: callback_fn,
        fn_context: callback_context,
        persist: persist,
        info_str: info_str
      });
      return callback_fn;
    };
    self.notifyChangeListeners = function() {
      var activeLayoutName, idx, listener, prevActiveLayoutName, removed_fn, unpersistent, unpersistents, weight, weights, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
      activeLayoutName = exports.getLayoutName();
      prevActiveLayoutName = exports.getOldLayoutName();
      unpersistents = [];
      weights = utils.objectKeys(self.changeListeners).sort();
      for (_i = 0, _len = weights.length; _i < _len; _i++) {
        weight = weights[_i];
        _ref = self.changeListeners[weight];
        for (idx = _j = 0, _len1 = _ref.length; _j < _len1; idx = ++_j) {
          listener = _ref[idx];
          if (listener.info_str) {
            console.log("notifyChangeListeners: '" + listener.info_str + "'");
          }
          listener.fn.apply(listener.fn_context, [activeLayoutName, prevActiveLayoutName]);
          if (!listener.persist) {
            unpersistents.push([weight, idx]);
          }
        }
      }
      _ref1 = unpersistents.reverse();
      _results = [];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        unpersistent = _ref1[_k];
        weight = unpersistent[0];
        idx = unpersistent[1];
        removed_fn = self.changeListeners[weight].splice(idx, 1);
        _results.push(console.debug("Removing changeListener[" + idx + "]", removed_fn));
      }
      return _results;
    };
    self.setBodyLayoutClassName = function() {
      var activeLayoutName, prevActiveLayoutName, _ref, _ref1;
      activeLayoutName = (_ref = exports.getLayoutName()) != null ? _ref.replace(/_/g, '-') : void 0;
      prevActiveLayoutName = (_ref1 = exports.getOldLayoutName()) != null ? _ref1.replace(/_/g, '-') : void 0;
      $('body').removeClass("layout-" + prevActiveLayoutName);
      return $('body').addClass("layout-" + activeLayoutName);
    };
    exports.addLayout = function(name, min_width, max_width, weight, media_query) {
      var layout;
      if (!name || typeof name !== 'string') {
        console.error("addLayout: 'name' must be provided and a string");
        return;
      }
      if ((min_width == null) && (max_width == null)) {
        console.error("addLayout: '" + name + "' min_width and max_width missing!");
        return;
      }
      if ((weight == null) || typeof weight !== 'number') {
        console.error("addLayout: 'weight' must be provided and a number");
        return;
      }
      if (!media_query || typeof media_query !== 'string') {
        console.error("addLayout: 'media_query' must be provided and a string");
        return;
      }
      min_width = parseInt(min_width) || void 0;
      max_width = parseInt(max_width) || void 0;
      layout = {
        '__name': name,
        '__weight': parseInt(weight),
        'min_width': parseInt(min_width),
        'max_width': parseInt(max_width),
        'media_query': media_query
      };
      self.layouts[name] = layout;
      self.sortedLayouts.push(layout);
      return self.sortedLayouts.sort(function(a, b) {
        return (a.__weight >= b.__weight ? 1 : -1);
      });
    };
    exports.getLayoutName = function() {
      if (self.currentLayout) {
        return self.currentLayout.__name;
      } else {
        return null;
      }
    };
    exports.getOldLayoutName = function() {
      if (self.oldLayout) {
        return self.oldLayout.__name;
      } else {
        return null;
      }
    };
    exports.getLayouts = function() {
      return self.layouts;
    };
    exports.getLayoutNames = function() {
      var layout, layoutNames, _i, _len, _ref;
      layoutNames = [];
      _ref = self.sortedLayouts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layout = _ref[_i];
        layoutNames.push(layout.__name);
      }
      return layoutNames;
    };
    self.getLayoutNameGetter = function() {
      var filterLayoutName, getter, getterList, valid, _i, _len;
      filterLayoutName = function(layoutNameString) {
        var e, layoutName, matches;
        layoutName = null;
        try {
          matches = layoutNameString.match(self.validLayoutNameRegExp);
          if (matches != null) {
            layoutName = matches[0];
          }
        } catch (_error) {
          e = _error;
          console.error("getLayoutNameGetter -> filterLayoutName:", e);
        }
        return layoutName;
      };
      getterList = [
        {
          info: "document.documentElement.currentStyle['fontFamily']",
          supported: typeof document.documentElement.currentStyle !== 'undefined',
          fn: function() {
            var layoutString;
            layoutString = document.documentElement.currentStyle["fontFamily"];
            return filterLayoutName(layoutString);
          }
        }, {
          info: "window.getComputedStyle(document.documentElement).getPropertyValue('font-family')",
          supported: typeof window.getComputedStyle === 'function',
          fn: function() {
            var layoutString;
            layoutString = window.getComputedStyle(document.documentElement).getPropertyValue('font-family');
            return filterLayoutName(layoutString);
          }
        }, {
          info: "" + exports.__id + " internal Width calculation",
          supported: true,
          fn: self.getLayoutNameByVpWidth
        }
      ];
      for (_i = 0, _len = getterList.length; _i < _len; _i++) {
        getter = getterList[_i];
        console.info("Checking layoutNameGetter: " + getter.info + " ");
        console.info(" -Supported: " + (getter.supported ? 'YES' : 'NO'));
        valid = false;
        if (getter.supported) {
          if (typeof (getter.fn()) === 'string') {
            valid = true;
          }
        }
        console.info(" -Valid result: " + (valid ? 'YES' : 'NO'));
        if (valid) {
          return getter.fn;
        }
      }
      console.error("getLayoutNameGetter: No valid getter found!!");
      if (console.getLevel('debug')) {
        return alert('"getLayoutNameGetter: No valid getter found!!"');
      }
    };
    return self.getLayoutNameByVpWidth = function(debug) {
      var activeLayout, layout, targetWidth, _i, _len, _ref;
      if (debug == null) {
        debug = false;
      }
      targetWidth = $(window).width();
      debug && console.debug("getLayoutNameByVpWidth targetWidth: '" + targetWidth + "'");
      activeLayout = self.sortedLayouts[0];
      _ref = self.sortedLayouts.reverse();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layout = _ref[_i];
        if (!(layout)) {
          continue;
        }
        debug && console.debug("getLayoutNameByVpWidth checking '" + layout.__name + "'");
        if ((!layout.min_width) || (typeof layout.min_width === 'number' && targetWidth > layout.min_width)) {
          if ((!layout.max_width) || (typeof layout.max_width === 'number' && targetWidth < layout.max_width)) {
            debug && console.debug("getLayoutNameByVpWidth match '" + layout.__name + "'");
            activeLayout = layout;
            break;
          }
        }
      }
      return activeLayout.__name;
    };
  });

}).call(this);
;/**/
